---
- name: Preapre all ts hosts
  hosts: ts
  become: true
  become_user: root
  remote_user: almalinux
  tasks:
    - name: Create directory for ssh-keys
      file: state=directory mode=0700 dest=/root/.ssh/

    - name: Adding rsa-key in /root/.ssh/authorized_keys
      copy: src=../../../keys/id_rsa.pub dest=/root/.ssh/authorized_keys owner=root mode=0600
      ignore_errors: true

    - name: Installing tools
      yum: >
        name={{ item }}
        state=present
        update_cache=yes
      with_items:
        - git
        - curl

    - name: Add docker repository
      command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Installing docker package
      yum: >
        name={{ item }}
        state=present
        update_cache=yes
      with_items:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: Enable docker daemon
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install docker-compose
      raw: $(curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose && chmod +x /usr/bin/docker-compose)

- name: Setup ts-server
  hosts: ts-servers
  become: true
  become_user: root
  remote_user: almalinux
  tasks:

    - name: Synchronization
      copy:
        src: stack1/
        dest: "/opt/stack/"
        owner: root
        group: root
        mode: 0644

    - name: Pull all images in compose
      command: docker-compose -f /opt/stack/docker-compose.yaml pull

    - name: Up all services in compose
      command: docker-compose -f /opt/stack/docker-compose.yaml up -d

- name: Setup ts-agent
  hosts: ts-agents
  become: true
  become_user: root
  remote_user: almalinux
  tasks:

    - name: Synchronization
      copy:
        src: stack2/
        dest: "/opt/stack/"
        owner: root
        group: root
        mode: 0644
      become: true

    - name: Pull all images in compose
      command: docker-compose -f /opt/stack/docker-compose.yaml pull

    - name: Up all services in compose
      command: docker-compose -f /opt/stack/docker-compose.yaml up -d

- name: Get Nexus installed
  hosts: nexus
  pre_tasks:
    - name: Create Nexus group
      become: true
      group:
        name: "{{ nexus_user_group }}"
        state: present
    - name: Create Nexus user
      become: true
      user:
        name: "{{ nexus_user_name }}"
    - name: Install JDK
      become: true
      package:
        name: [java-1.8.0-openjdk, java-1.8.0-openjdk-devel]
        state: present
  tasks:
    - name: Disable SELinux
      selinux: state=disabled
      become: true

    - name: Disable SELinux
      command: setenforce 0
      become: true

    - name: Create Nexus directories
      become: true
      file:
        group: "{{ nexus_user_group }}"
        owner: "{{ nexus_user_name }}"
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ nexus_directory_log }}"
        - "{{ nexus_directory_data }}"
        - "{{ nexus_directory_data }}/etc"
        - "{{ nexus_directory_package }}"
        - "{{ nexus_directory_tmp }}"

    - name: Download Nexus
      become: true
      become_user: "{{ nexus_user_name }}"
      get_url:
        dest: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"
        url: "{{ nexus_download_url }}/nexus-{{ nexus_version }}-unix.tar.gz"

    - name: Unpack Nexus
      become: true
      become_user: "{{ nexus_user_name }}"
      unarchive:
        copy: no
        creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        dest: "{{ nexus_directory_package }}"
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}.tar.gz"

    - name: Link to Nexus Directory
      become: true
      become_user: "{{ nexus_user_name }}"
      file:
        dest: "{{ nexus_directory_home }}"
        src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
        state: link

    - name: Add NEXUS_HOME for Nexus user
      become: true
      become_user: "{{ nexus_user_name }}"
      lineinfile:
        create: yes
        dest: "/home/{{ nexus_user_name }}/.bashrc"
        insertafter: EOF
        line: "export NEXUS_HOME={{ nexus_directory_home }}"

    - name: Add run_as_user to Nexus.rc
      become: true
      become_user: "{{ nexus_user_name }}"
      lineinfile:
        create: yes
        dest: "{{ nexus_directory_home }}/bin/nexus.rc"
        insertafter: EOF
        line: "run_as_user=\"{{ nexus_user_name }}\""
        regexp: "^run_as_user"

    - name: Raise nofile limit for Nexus user
      become: true
      pam_limits:
        domain: "{{ nexus_user_name }}"
        limit_type: "-"
        limit_item: nofile
        value: "{{ nexus_ulimit }}"

    - name: Create Nexus service for SystemD
      become: true
      template:
        dest: /lib/systemd/system/nexus.service
        mode: 0644
        src: nexus.systemd.j2

    - name: Ensure Nexus service is enabled for SystemD
      become: true
      systemd:
        daemon_reload: yes
        enabled: yes
        name: nexus
      when:
        - nexus_service_enabled

    - name: Create Nexus vmoptions
      become: true
      become_user: "{{ nexus_user_name }}"
      template:
        dest: "{{ nexus_directory_home }}/bin/nexus.vmoptions"
        src: nexus.vmoptions.j2
      register: nexus_config_changed

    - name: Create Nexus properties
      become: true
      become_user: "{{ nexus_user_name }}"
      template:
        dest: "{{ nexus_directory_data }}/etc/nexus.properties"
        src: nexus.properties.j2
      register: nexus_config_changed

    - name: Lower Nexus disk space threshold
      become: true
      become_user: "{{ nexus_user_name }}"
      lineinfile:
        backrefs: yes
        dest: "{{ nexus_directory_home }}/etc/karaf/system.properties"
        insertafter: EOF
        line: "storage.diskCache.diskFreeSpaceLimit={{ nexus_configuration_disk_free_space_limit }}"
        regexp: ^storage\.diskCache\.diskFreeSpaceLimit
      when: nexus_configuration_disk_free_space_limit is not none
      register: nexus_config_changed

    - name: Start Nexus service if enabled
      become: true
      service:
        enabled: yes
        name: nexus
        state: started
      when:
        - nexus_service_start_on_boot
        - not nexus_config_changed.changed
      tags:
        - skip_ansible_lint

    - name: Ensure Nexus service is restarted
      become: true
      service:
        name: nexus
        state: restarted
      when:
        - nexus_service_start_on_boot
        - nexus_config_changed.changed
      tags:
        - skip_ansible_lint

    - name: Wait for Nexus port if started
      wait_for:
        port: "{{ nexus_port }}"
        state: started
        timeout: "{{ nexus_port_check_timeout }}"
      when:
        - nexus_service_start_on_boot